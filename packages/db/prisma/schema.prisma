generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  roomsCreated  Room[]    @relation("RoomOwner")

  rooms           Room[]            @relation("RoomUsers")
  questions       Question[]        @relation("QuestionsSent")
  upVotes         UpVote[]
  polls           Poll[]            @relation("RoomOwner")
  pollVotes       PollVote[]        @relation("UserPollVotes")
  quizzes         Quiz[]            @relation("QuizOwner")
  quizVotes       QuizVote[]
  quizLeaderBoard QuizLeaderBoard[]
  quizParticipant QuizParticipant[]
  accounts        Account[]
  sessions        Session[]
}

model Room {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  code      String     @unique
  spaceId   String     @unique
  createdBy User       @relation("RoomOwner", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String     @db.Uuid
  startDate DateTime   @default(now())
  endDate   DateTime
  polls     Poll[]     @relation("RoomPolls")
  status    RoomStatus @default(LAUNCHED)

  users     User[]     @relation("RoomUsers")
  questions Question[] @relation("Questions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]
}

enum RoomStatus {
  LAUNCHED
  ENDED
  DELETED
}

model Question {
  id       String         @id @default(uuid()) @db.Uuid
  question String
  sender   User           @relation("QuestionsSent", fields: [senderId], references: [id])
  senderId String         @db.Uuid
  room     Room           @relation("Questions", fields: [roomId], references: [id], onDelete: Cascade)
  roomId   String         @db.Uuid()
  upVotes  UpVote[]
  status   QuestionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpVote {
  id         String   @id @default(uuid())
  votedBy    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, questionId])
}

enum QuestionStatus {
  PENDING
  ANSWERED
  IGNORED
}

// POLL
model Poll {
  id           String       @id @default(uuid()) @db.Uuid
  pollQuestion String
  createdBy    User         @relation("RoomOwner", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String       @db.Uuid
  room         Room         @relation("RoomPolls", fields: [roomId], references: [id], onDelete: Cascade)
  roomId       String       @db.Uuid
  options      PollOption[]
  status       PollStatus   @default(DRAFT)
  pollVotes    PollVote[]
  isLaunched   Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PollStatus {
  DRAFT
  LAUNCHED
  ENDED
}

model PollOption {
  id        String     @id @default(uuid()) @db.Uuid
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String     @db.Uuid
  voteCount Int
  pollVotes PollVote[]
}

model PollVote {
  id       String     @id @default(uuid()) @db.Uuid
  poll     Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId   String     @db.Uuid
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String     @db.Uuid
  user     User       @relation("UserPollVotes", fields: [userId], references: [id], onDelete: Cascade)
  userId   String     @db.Uuid

  @@unique([userId, pollId])
}

model Quiz {
  id                String        @id @default(uuid()) @db.Uuid
  quizName          String
  room              Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId            String        @db.Uuid
  createdBy         User          @relation("QuizOwner", fields: [creatorId], references: [id])
  creatorId         String        @db.Uuid
  status            QuizStatus    @default(DRAFT)
  currentQuestion   QuizQuestion? @relation("CurrentQuizQuestion", fields: [currentQuestionId], references: [id])
  currentQuestionId String?       @unique @db.Uuid

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  quizQuestions   QuizQuestion[]    @relation("QuizToQuizQuestions")
  quizLeaderBoard QuizLeaderBoard[]
  quizParticipant QuizParticipant[]
}

enum QuizStatus {
  DRAFT
  LAUNCHED
  STOPPED
  ENDED
}

model QuizQuestion {
  id                     String       @id @default(uuid()) @db.Uuid
  question               String
  order                  Int          @default(0)
  quiz                   Quiz         @relation("QuizToQuizQuestions", fields: [quizId], references: [id], onDelete: Cascade)
  quizId                 String       @db.Uuid
  voteCount              Int
  quizVotes              QuizVote[]
  quizOptions            QuizOption[]
  isActive               Boolean      @default(false)
  isAnswerRevealed       Boolean      @default(false)
  timerSeconds           Int?
  currentQuestionForQuiz Quiz?        @relation("CurrentQuizQuestion")
  questionStartedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizOption {
  id             String       @id @default(uuid()) @db.Uuid
  text           String
  quizQuestion   QuizQuestion @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)
  quizQuestionId String       @db.Uuid
  isCorrect      Boolean      @default(false)
  voteCount      Int
  quizVotes      QuizVote[]
}

model QuizVote {
  id             String       @id @default(uuid()) @db.Uuid
  quizQuestion   QuizQuestion @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)
  quizQuestionId String       @db.Uuid
  quizOption     QuizOption   @relation(fields: [quizOptionId], references: [id], onDelete: Cascade)
  quizOptionId   String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  createdAt      DateTime     @default(now())

  @@unique([userId, quizQuestionId])
}

model QuizLeaderBoard {
  id        String   @id @default(uuid()) @db.Uuid
  quizId    String   @db.Uuid
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([quizId, userId])
}

model QuizParticipant {
  id       String   @id @default(uuid()) @db.Uuid
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @db.Uuid
  name     String
  joinedAt DateTime @default(now())

  @@unique([quizId, userId])
}
