generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  email        String   @unique
  password     String
  createdAt    DateTime @default(now())
  roomsCreated Room[]   @relation("RoomOwner")

  rooms     Room[]     @relation("RoomUsers")
  questions Question[] @relation("QuestionsSent")
  upVotes   UpVote[]
  polls     Poll[]     @relation("RoomOwner")
  pollVotes PollVote[] @relation("UserPollVotes")
}

model Room {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  code      String   @unique
  createdBy User     @relation("RoomOwner", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String   @db.Uuid
  startDate DateTime @default(now())
  endDate   DateTime
  polls     Poll[]   @relation("RoomPolls")

  users     User[]     @relation("RoomUsers")
  questions Question[] @relation("Questions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id       String         @id @default(uuid()) @db.Uuid
  question String
  sender   User           @relation("QuestionsSent", fields: [senderId], references: [id])
  senderId String         @db.Uuid
  room     Room           @relation("Questions", fields: [roomId], references: [id], onDelete: Cascade)
  roomId   String         @db.Uuid()
  upVotes  UpVote[]
  status   QuestionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpVote {
  id         String   @id @default(uuid())
  votedBy    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, questionId])
}

enum QuestionStatus {
  PENDING
  ANSWERED
  IGNORED
}

// POLL
model Poll {
  id           String       @id @default(uuid()) @db.Uuid
  pollQuestion String
  createdBy    User         @relation("RoomOwner", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String       @db.Uuid
  room         Room         @relation("RoomPolls", fields: [roomId], references: [id], onDelete: Cascade)
  roomId       String       @db.Uuid
  options      PollOption[]
  status       PollStatus   @default(DRAFT)
  pollVotes    PollVote[]
  isLaunched   Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PollStatus {
  DRAFT
  LAUNCHED
  ENDED
}

model PollOption {
  id        String     @id @default(uuid()) @db.Uuid
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String     @db.Uuid
  voteCount Int
  pollVotes PollVote[]
}

model PollVote {
  id       String     @id @default(uuid()) @db.Uuid
  poll     Poll       @relation(fields: [pollId], references: [id])
  pollId   String     @db.Uuid
  option   PollOption @relation(fields: [optionId], references: [id])
  optionId String     @db.Uuid
  user     User       @relation("UserPollVotes", fields: [userId], references: [id])
  userId   String     @db.Uuid

  @@unique([userId, pollId])
}
